과제

객체생성
객체생성이 무엇인가? ppt로?
- 메모리를 올리기 위해 객체를 생성
- 

객체지향 언어
- 기존의 프로그래밍 언어에 몇 가지 새로운 규칙을 추가한 보다 발전된 형태의 것

객체지향 언어의 장점
1. 코드의 재사용성이 높다
 - 새로운 코드를 작성할 때 기존의 코드를 이용하여 쉽게 작성할 수 있다.
 - 프로그램의 개발과 유지보수에 드는 시간과 비용을 획기적으로 개선
2. 코드의 관리가 용이하다
 - 코드간의 관계를 이용해서 적은 노력으로 쉽게 코드를 변경할 수 있다.
3. 신뢰성이 높은 프로그래밍을 가능하게 한다.
 - 제어자와 메서드를 이용해서 데이터를 보호하고 올바른 값을 유지하도록 하며,
   코드의 중복을 제거하여 코드의 불일치로 인한 오동작을 방지할 수 있다.

객체
- 실제로 존재하는 것
- 사물과 같이 유형적인 것 뿐만 아니라, 개념이난 논리와 같은 무형적인 것들도 객체로 간주
- 클래스에 정의된 대로 생성

클래스
- 객체를 정의해 놓은 것, 객체의 설계도, 틀
- 객체를 생성하는 데 사용


인스턴스
- 클래스로부터 만들어진 객체
- 클래스로부터 객체를 만드는 과정을 인스턴스화라고 한다
- 하나의 클래스로부터 여러 개의 인스턴스를 만들 수 있다.

인스턴스 사용
class 클래스명{
	클래스명 변수명 = new 클래스명();
	//클래스의 객체를 참조하기 위한 참조변수를 선언,
	//클래스의 객체를 생성 후, 객체의 주소를 참조변수에 저장

메소드
- 특정 작업을 수행하는 일련의 문장들을 하나로 묶은 것
- 메소드를 호출하게 되면 중괄호 블록에 있는 코드들이 일괄적 수행
- 필드를 읽고 수행하는 역할도 하지만, 다른 객체를 생성해서 다양한 기능을 수행하기도 함
- 객체간 데이터 전달 수단으로 사용됨
- 기본적으로 수학의 함수와 유사, 어떤 값을 입력하면 이 값으로 작업을 수행해서 결과를 반환

메소드 사용 이유
1. 높은 재사용성
2. 중복된 코드의 제서
3. 프로그램의 구조화

메소드 선언과 구현
- 메소드를 정의한다는 것은 선언부와 구현부를 작성하는 것을 뜻함
선언부
- '메소드의 이름' 과 '매개변수 선언', '반환타입'으로 구성되어 있다
- 메소드가 작업을 수행하기 위해 어떤 값들을 필요로 하고 작업의 결과로 어떤 타입의 값을 반환하는지에 대한 정보 제공
- 선언부에 변경사항이 생겼을 시, 그 메소드가 호출되는 곳 전부 변경되어야 하기 때문에 신중히 작성하여야 함

매개변수 선언
- 메서드가 작업을 수행하는데 필요한 값들을 제공받기 위한 것
- 필요한 값의 개수만큼 변수를 선언하여 각 변수 간의 구분은 쉼표를 사용

구현부
- ()
- 메서드를 호출했을 때 수행 될 문장들을 넣음

리턴(return)
- 현재 실행중인 메서드를 종료하고 호출한 메서드로 되돌아감
- 반환타입이 void인 경우 자동으로 return;을 추가해줌

매소드 간 호출/참조
- 같은 클래스에 속한 멤버들 간에는 별도의 인스턴스를 생성하지 않고도 서로 참조, 호출할 수 있다
- 









