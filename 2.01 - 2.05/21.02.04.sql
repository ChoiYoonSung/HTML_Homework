/*
거래처명 BUYER_NAME을 알아내기 위해서는
1. BUYPROD테이블의 BUY_PROD컬럼과 PROD테이블의 PROD_ID컬럼을 통해 PROD_BUYER를 알아내고
2. PROD테이블의 PROD_BUYER컬럼과 BUYER테이블의 BUYER_ID컬럼을 통해 BUYER테이블의 BUYER_NAME을 알아냄
*/

--2005년도 월별 판매 현황
--Alias 판매월(CART_NO), 판매수량, 판매금액(판매수량*판매가)
SELECT SUBSTR(CART_NO,5,2) 판매월
    ,  SUM(CART_QTY) 판매수량
    ,  TO_CHAR(SUM(CART_QTY*PROD_SALE),'L999,999,999,999') 판매금액
FROM CART,PROD
WHERE CART_NO LIKE '2005%'
AND CART_PROD = PROD_ID
GROUP BY SUBSTR(CART_NO,5,2)
ORDER BY 1;

--ANSI
SELECT SUBSTR(CART_NO,5,2) AS 판매월
    ,  TO_CHAR(SUM(CART_QTY),'999,999') AS 판매수량
    ,  TO_CHAR(SUM(CART_QTY*PROD_SALE),'L999,999,999,999') AS 판매금액
FROM CART INNER JOIN PROD ON CART_PROD = PROD_ID
WHERE CART_NO LIKE '2005%'
GROUP BY SUBSTR(CART_NO,5,2)
ORDER BY 1;

--OUTER JOIN
--자식테이블 보다 부모테이블의 자료 수가 많다

--전체 분류의 상품자료수를 검색 조회
--Alias 분류코드, 분류명, 상품자료수
SELECT * FROM LPROD;

--INNER JOIN
SELECT LPROD_GU 분류코드
    ,  LPROD_NM 분류명
    ,  COUNT(PROD_LGU) 상품자료수
FROM LPROD, PROD
WHERE LPROD_GU = PROD_LGU
GROUP BY LPROD_GU, LPROD_NM;

--ANSI
SELECT LPROD_GU 분류코드
    ,  LPROD_NM 분류명
    ,  COUNT(PROD_LGU) 상품자료수
FROM LPROD INNER JOIN PROD ON LPROD_GU = PROD_LGU
GROUP BY LPROD_GU, LPROD_NM;

--OUTER JOIN
SELECT LPROD_GU 분류코드
    ,  LPROD_NM 분류명
    ,  COUNT(PROD_LGU) 상품자료수
FROM LPROD, PROD
WHERE LPROD_GU = PROD_LGU(+)
GROUP BY LPROD_GU, LPROD_NM;

--ANSI
SELECT LPROD_GU 분류코드
    ,  LPROD_NM 분류명
    ,  COUNT(PROD_LGU) 상품자료수
FROM LPROD OUTER JOIN PROD ON LPROD_GU = PROD_LGU(+)
GROUP BY LPROD_GU, LPROD_NM;

--전체상품의 2005년 1월 입고수량을 검색 조회
--Alias 상품코드, 상품명, 입고수량
SELECT PROD_ID
    ,  PROD_NAME
    ,  SUM(BUY_QTY)
FROM PROD, BUYPROD
WHERE PROD_ID = BUY_PROD(+)
AND BUY_DATE LIKE '05/01%'
GROUP BY PROD_ID, PROD_NAME;

--ANSI
SELECT PROD_ID      prodId
    ,  PROD_NAME    prodName
    ,  NVL(SUM(BUY_QTY),0)
FROM PROD LEFT OUTER JOIN BUYPROD ON (PROD_ID = BUY_PROD AND BUY_DATE LIKE '05/01%')
GROUP BY PROD_ID, PROD_NAME;

--LEFT/RIGHT OUTER JOIN
--OUTER JOIN 사용 중 왼쪽 / 오른쪽에 무게를 싣게 함
--원하는 컬럼의 모든 자료를 출력하기 위해

--전체 회원 2005년 4월 구매현황 조회
--Alias 회원ID, 성명, 구매수량의 합
SELECT MEM_ID               memId       --회원ID
    ,  MEM_NAME             memName     --성명
    ,  NVL(SUM(CART_QTY),0) cartQtySum  --구매수량_합
FROM MEMBER LEFT OUTER JOIN CART 
ON (MEM_ID = CART_MEMBER AND SUBSTR(CART_NO,1,6) LIKE '200504%' )
GROUP BY MEM_ID, MEM_NAME
ORDER BY MEM_ID;

--회원ID 'h001'인 고객의 마일리지 점수보다 이상인 회원만 검색
--Alias 회원ID, 성명, 마일리지
SELECT B.MEM_ID
    ,  B.MEM_NAME
    ,  B.MEM_MILEAGE
FROM MEMBER A, MEMBER B
WHERE A.MEM_ID = 'h001'
AND A.MEM_MILEAGE <= B.MEM_MILEAGE
ORDER BY B.MEM_MILEAGE DESC;



